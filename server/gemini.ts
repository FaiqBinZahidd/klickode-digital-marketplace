import { GoogleGenerativeAI } from "@google/generative-ai";

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || "");

export async function generateLearningContent(topic: string, level: string, language: string) {
  try {
    const model = genAI.getGenerativeModel({ model: "gemini-2.5-flash" });
    
    const prompt = `You are Klicko, an expert AI programming tutor. Create comprehensive learning content for the topic "${topic}" in ${language} programming language at ${level} level.

Please provide:
1. A detailed explanation of the concept
2. 2-3 practical code examples
3. 4-5 hands-on exercises
4. 5 important tips and best practices  
5. 5 related topics to learn next

Format your response as JSON with this structure:
{
  "explanation": "detailed explanation here",
  "codeExamples": ["code example 1", "code example 2"],
  "exercises": ["exercise 1", "exercise 2", "exercise 3", "exercise 4"],
  "tips": ["tip 1", "tip 2", "tip 3", "tip 4", "tip 5"],
  "nextTopics": ["topic 1", "topic 2", "topic 3", "topic 4", "topic 5"]
}

Make the content engaging, practical, and appropriate for the ${level} skill level. Include real-world examples and focus on best practices in ${language}.`;

    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();
    
    try {
      // Clean the response to extract JSON
      const cleanText = text.replace(/```json\s*|\s*```/g, '').trim();
      return JSON.parse(cleanText);
    } catch (parseError) {
      console.error("Failed to parse Gemini response:", parseError);
      console.error("Original text:", text);
      // Fallback response if JSON parsing fails
      return {
        explanation: `Here's a comprehensive explanation of ${topic} in ${language} at ${level} level:\n\n${text}`,
        codeExamples: [`// ${topic} example in ${language}\nconsole.log("Generated by Klicko AI");`],
        exercises: [`Practice ${topic} with real examples`],
        tips: [`Focus on understanding the core concepts of ${topic}`],
        nextTopics: [`Advanced ${topic} techniques`]
      };
    }
  } catch (error) {
    console.error("Gemini API error:", error);
    throw new Error("Failed to generate learning content");
  }
}

export async function generateCodeExplanation(code: string, language: string) {
  try {
    const model = genAI.getGenerativeModel({ model: "gemini-2.5-flash" });
    
    const prompt = `You are Klicko, an expert code reviewer. Analyze this ${language} code and provide:
1. What the code does
2. Key concepts demonstrated
3. Best practices used or missing
4. Potential improvements
5. Learning opportunities

Code:
\`\`\`${language}
${code}
\`\`\`

Provide a clear, educational explanation that helps developers learn.`;

    const result = await model.generateContent(prompt);
    const response = await result.response;
    return response.text();
  } catch (error) {
    console.error("Code explanation error:", error);
    throw new Error("Failed to explain code");
  }
}

export async function processAITool(tool: string, input: string, language?: string) {
  try {
    console.log(`Processing AI tool: ${tool} with input: ${input.substring(0, 100)}...`);
    const model = genAI.getGenerativeModel({ model: "gemini-2.5-pro" });
    let prompt = "";
    
    switch (tool) {
      case "generate":
      case "generator":
        prompt = `You are Klicko, an expert code generator. Generate clean, well-commented ${language || "JavaScript"} code based on this description:

${input}

Requirements:
- Write production-ready code
- Include helpful comments
- Follow best practices
- Make it efficient and readable
- Provide brief explanation of key parts

Return the code with explanations.`;
        break;
        
      case "translate":
      case "translator":
        prompt = `You are Klicko, an expert code translator. Translate this code to ${language || "JavaScript"}:

${input}

Requirements:
- Maintain the same functionality
- Use idiomatic ${language || "JavaScript"} patterns
- Optimize for the target language
- Include comments explaining any language-specific features
- Ensure best practices are followed

Return the translated code with explanations.`;
        break;
        
      case "optimize":
      case "optimizer":
        prompt = `You are Klicko, an expert code optimizer. Optimize this ${language || "JavaScript"} code for better performance and readability:

${input}

Requirements:
- Improve performance where possible
- Enhance readability and maintainability
- Follow best practices
- Remove code smells
- Explain what was optimized and why

Return the optimized code with detailed explanations of improvements.`;
        break;
        
      case "explain":
      case "explainer":
        prompt = `You are Klicko, an expert code explainer. Explain this ${language || "JavaScript"} code in detail:

${input}

Requirements:
- Break down each significant part
- Explain the logic step by step
- Identify patterns and techniques used
- Mention any best practices or anti-patterns
- Make it educational and easy to understand

Provide a comprehensive explanation.`;
        break;
        
      case "debug":
      case "debugger":
        prompt = `You are Klicko, an expert code debugger. Debug this ${language || "JavaScript"} code and identify potential issues:

${input}

Requirements:
- Identify syntax errors
- Find logical bugs
- Spot potential runtime errors
- Suggest security concerns
- Provide fixed code with explanations

Return the debugged code with detailed explanations of issues found and fixes applied.`;
        break;
        
      case "review":
      case "reviewer":
        prompt = `You are Klicko, an expert code reviewer. Review this ${language || "JavaScript"} code and provide comprehensive feedback:

${input}

Requirements:
- Assess code quality
- Identify best practices used or missing
- Suggest improvements
- Check for potential issues
- Provide constructive feedback

Return a detailed code review with suggestions for improvement.`;
        break;
        
      default:
        throw new Error(`Unknown AI tool: ${tool}`);
    }

    console.log(`Generated prompt for ${tool}:`, prompt.substring(0, 200) + "...");
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();
    console.log(`AI tool ${tool} response:`, text.substring(0, 200) + "...");
    return text;
  } catch (error) {
    console.error(`Error processing AI tool ${tool}:`, error);
    console.error(`Tool: ${tool}, Input: ${input.substring(0, 100)}...`);
    throw new Error(`Failed to process ${tool} request`);
  }
}