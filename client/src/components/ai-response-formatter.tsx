import { useState } from 'react';
import { Button } from './ui/button';
import { Copy, Check, Play, Eye } from 'lucide-react';
import CodeSyntaxHighlighter from './code-syntax-highlighter';
import AITypingEffect from './ai-typing-effect';

interface AIResponseFormatterProps {
  response: string;
  isTyping?: boolean;
  language?: string;
  showCopyButton?: boolean;
  className?: string;
}

export default function AIResponseFormatter({ 
  response, 
  isTyping = false, 
  language = 'javascript',
  showCopyButton = true,
  className = "" 
}: AIResponseFormatterProps) {
  const [copied, setCopied] = useState(false);

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(response);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy response:', err);
    }
  };

  // Parse and format the AI response
  const formatResponse = (text: string) => {
    // Split into sections for better organization
    const sections = text.split(/\n\n+/);
    
    return sections.map((section, index) => {
      // Handle code blocks
      if (section.includes('```')) {
        const codeMatch = section.match(/```(\w+)?\n([\s\S]*?)```/);
        if (codeMatch) {
          const [, lang, code] = codeMatch;
          return (
            <div key={index} className="my-4">
              <CodeSyntaxHighlighter 
                code={code.trim()} 
                language={lang || language} 
                showCopyButton={true}
              />
            </div>
          );
        }
      }

      // Format the text with proper styling
      let formattedSection = section;

      // Convert **text** to red headings with glow effect
      formattedSection = formattedSection.replace(/\*\*(.*?)\*\*/g, 
        '<h3 class="text-primary-red font-semibold text-lg mb-2 mt-4 glow-red">$1</h3>');

      // Convert numbered lists
      formattedSection = formattedSection.replace(/^(\d+\.\s)/gm, 
        '<span class="text-primary-red font-semibold glow-red">$1</span>');

      // Convert bullet points
      formattedSection = formattedSection.replace(/^[-•]\s/gm, 
        '<span class="text-primary-red glow-red">• </span>');

      // Highlight inline code
      formattedSection = formattedSection.replace(/`([^`]+)`/g, 
        '<code class="bg-space-darker text-blue-400 px-2 py-1 rounded text-sm font-space-mono">$1</code>');

      // Add spacing between paragraphs
      const paragraphs = formattedSection.split('\n').filter(p => p.trim());
      
      return (
        <div key={index} className="mb-4">
          {paragraphs.map((paragraph, pIndex) => (
            <p 
              key={pIndex} 
              className="text-gray-300 leading-relaxed mb-3 last:mb-0"
              dangerouslySetInnerHTML={{ __html: paragraph }}
            />
          ))}
        </div>
      );
    });
  };

  return (
    <div className={`relative group ${className}`}>
      <div className="bg-space-darker rounded-lg border border-gray-700 overflow-hidden">
        {/* Header with actions */}
        <div className="flex items-center justify-between px-4 py-3 bg-gray-800 border-b border-gray-700">
          <div className="flex items-center space-x-2">
            <div className="w-3 h-3 bg-primary-red rounded-full animate-pulse"></div>
            <span className="text-sm text-gray-400 font-space-mono">
              {isTyping ? 'AI is thinking...' : 'AI Response'}
            </span>
          </div>
          <div className="flex items-center space-x-2">
            {showCopyButton && (
              <Button
                size="sm"
                variant="ghost"
                onClick={copyToClipboard}
                className="h-8 w-8 p-0 hover:bg-gray-700"
                title="Copy response"
              >
                {copied ? (
                  <Check className="h-4 w-4 text-green-400" />
                ) : (
                  <Copy className="h-4 w-4 text-gray-400" />
                )}
              </Button>
            )}
          </div>
        </div>

        {/* Content */}
        <div className="p-6 max-h-96 overflow-y-auto">
          {isTyping ? (
            <AITypingEffect 
              text={response}
              speed={20}
              className="text-gray-300 font-space-mono"
            />
          ) : (
            <div className="prose prose-invert max-w-none">
              {formatResponse(response)}
            </div>
          )}
        </div>

        {/* Footer with additional actions */}
        <div className="px-4 py-2 bg-gray-800/50 border-t border-gray-700">
          <div className="flex items-center justify-between">
            <div className="text-xs text-gray-500">
              Generated by Klicko AI • {new Date().toLocaleTimeString()}
            </div>
            <div className="flex space-x-2">
              <Button
                size="sm"
                variant="ghost"
                className="h-7 text-xs text-gray-400 hover:text-white"
                onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}
              >
                <Eye className="h-3 w-3 mr-1" />
                Scroll to Top
              </Button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}